{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a92a7e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on all addresses.\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      " * Running on http://192.168.1.6:5000/ (Press CTRL+C to quit)\n",
      "[2025-02-18 23:39:00,080] ERROR in app: Exception on / [GET]\n",
      "Traceback (most recent call last):\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"C:\\Users\\HP\\AppData\\Local\\Temp\\ipykernel_4188\\780448482.py\", line 78, in index\n",
      "    return render_template('index.html')\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\templating.py\", line 138, in render_template\n",
      "    ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\jinja2\\environment.py\", line 930, in get_or_select_template\n",
      "    return self.get_template(template_name_or_list, parent, globals)\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\jinja2\\environment.py\", line 883, in get_template\n",
      "    return self._load_template(name, self.make_globals(globals))\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\jinja2\\environment.py\", line 857, in _load_template\n",
      "    template = self.loader.load(self, name, globals)\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\jinja2\\loaders.py\", line 115, in load\n",
      "    source, filename, uptodate = self.get_source(environment, name)\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\templating.py\", line 60, in get_source\n",
      "    return self._get_source_fast(environment, template)\n",
      "  File \"E:\\anaconda\\lib\\site-packages\\flask\\templating.py\", line 89, in _get_source_fast\n",
      "    raise TemplateNotFound(template)\n",
      "jinja2.exceptions.TemplateNotFound: index.html\n",
      "192.168.1.6 - - [18/Feb/2025 23:39:00] \"GET / HTTP/1.1\" 500 -\n",
      "192.168.1.6 - - [18/Feb/2025 23:39:00] \"GET /favicon.ico HTTP/1.1\" 404 -\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, render_template, Response\n",
    "import cv2\n",
    "import face_recognition\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "# 📌 تحميل جميع الصور من مجلد 'photo/' والتعرف على الوجوه\n",
    "face_encodings_list = []\n",
    "face_names = []\n",
    "\n",
    "photo_dir = \"photo/\"\n",
    "if not os.path.exists(photo_dir):\n",
    "    print(f\"⚠️ خطأ: المجلد '{photo_dir}' غير موجود.\")\n",
    "    exit()\n",
    "\n",
    "for file_name in os.listdir(photo_dir):\n",
    "    if file_name.lower().endswith((\".jpg\", \".jpeg\", \".png\")):\n",
    "        image_path = os.path.join(photo_dir, file_name)\n",
    "        image = face_recognition.load_image_file(image_path)\n",
    "        encodings = face_recognition.face_encodings(image)\n",
    "        if encodings:\n",
    "            face_encodings_list.append(encodings[0])\n",
    "            face_names.append(os.path.splitext(file_name)[0])\n",
    "        else:\n",
    "            print(f\"⚠️ تحذير: لم يتم العثور على وجه في {file_name}\")\n",
    "\n",
    "if not face_encodings_list:\n",
    "    print(\"⚠️ خطأ: لم يتم تحميل أي وجوه، تأكد من وضع صور صالحة في المجلد.\")\n",
    "    exit()\n",
    "\n",
    "# بدء التقاط الفيديو من الكاميرا\n",
    "video_cap = cv2.VideoCapture(0)\n",
    "video_cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)\n",
    "video_cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)\n",
    "\n",
    "def gen_frames():\n",
    "    \"\"\"توليد إطارات الفيديو لمعالجتها وبثها عبر الويب.\"\"\"\n",
    "    while True:\n",
    "        ret, frame = video_cap.read()\n",
    "        if not ret:\n",
    "            break\n",
    "\n",
    "        # تحويل الإطار إلى RGB للمعالجة بواسطة face_recognition\n",
    "        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "        face_locations = face_recognition.face_locations(rgb)\n",
    "        face_encodings = face_recognition.face_encodings(rgb, face_locations)\n",
    "        face_names_detected = []\n",
    "\n",
    "        # مقارنة كل وجه مكتشف مع الوجوه المحفوظة\n",
    "        for face_encoding in face_encodings:\n",
    "            matches = face_recognition.compare_faces(face_encodings_list, face_encoding, tolerance=0.5)\n",
    "            face_distances = face_recognition.face_distance(face_encodings_list, face_encoding)\n",
    "            if any(matches):\n",
    "                best_match = np.argmin(face_distances)\n",
    "                name = face_names[best_match]\n",
    "            else:\n",
    "                name = \"Unknown\"\n",
    "            face_names_detected.append(name)\n",
    "\n",
    "        # رسم مستطيل حول الوجه وكتابة الاسم\n",
    "        for (top, right, bottom, left), name in zip(face_locations, face_names_detected):\n",
    "            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)\n",
    "            cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)\n",
    "\n",
    "        # تحويل الإطار إلى JPEG\n",
    "        ret, buffer = cv2.imencode('.jpg', frame)\n",
    "        frame_bytes = buffer.tobytes()\n",
    "\n",
    "        # بث الإطار عبر بروتوكول multipart\n",
    "        yield (b'--frame\\r\\n'\n",
    "               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame_bytes + b'\\r\\n')\n",
    "\n",
    "@app.route('/')\n",
    "def index():\n",
    "    \"\"\"عرض الصفحة الرئيسية.\"\"\"\n",
    "    return render_template('index.html')\n",
    "\n",
    "@app.route('/video_feed')\n",
    "def video_feed():\n",
    "    \"\"\"بث الفيديو المُعالج.\"\"\"\n",
    "    return Response(gen_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    # تشغيل التطبيق على المنفذ 5000\n",
    "    app.run(host='0.0.0.0', port=5000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91c9569f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
